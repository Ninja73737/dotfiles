---
- name: Setup with my system configuration
  hosts: all
  collections:
    - kewlfft.aur
  vars:
    become_for_packages: "{{ ansible_facts['os_family'] != 'Darwin' }}"
    docker: "{{ ansible_facts['virtualization_type'] == 'docker' }}"
    g14: "{{ ansible_facts['product_name'] == 'ROG Zephyrus G14 GA401QM_GA401QM' }}"
    # TODO: figure out how to handle cores in docker containers
    cores: "{{ ansible_facts['processor_vcpus'] | int }}"
    base_pacman_config: "[options]\nColor\nParallelDownloads = {{ cores }}"
    g14_pacman_repo_config: |
      [g14]
      SigLevel = Optional TrustAll
      Server = https://arch.asus-linux.org
    g14_pacman_config: "{{ base_pacman_config + '\n' + g14_pacman_repo_config }}"
    pacman_config: "{{ '[options]\nColor' if docker else (g14_pacman_config if g14 else base_pacman_config) }}"
  tasks:
    - name: Write pacman config
      blockinfile:
        path: /etc/pacman.conf
        block: "{{ pacman_config }}"
      become: "{{ become_for_packages }}"
      when: ansible_facts['os_family'] == 'Archlinux'
    - name: Enable community and edge Alpine repos
      shell: echo "http://dl-cdn.alpinelinux.org/alpine/v$(cat /etc/alpine-release | cut -d'.' -f1,2)/community" >> /etc/apk/repositories && echo "http://dl-cdn.alpinelinux.org/alpine/edge/testing" >> /etc/apk/repositories
      become: "{{ become_for_packages }}"
      when: ansible_facts['os_family'] == 'Alpine'
    - name: Update Alpine system
      apk:
        update_cache: true
        upgrade: true
      become: "{{ become_for_packages }}"
      when: ansible_facts['os_family'] == 'Alpine'
    - name: Update Archlinux system
      pacman:
        upgrade: true
        update_cache: true
      become: "{{ become_for_packages }}"
      when: ansible_facts['os_family'] == 'Archlinux'
      # TODO: test on macos, figure out how to install homebrew if it's not present
    - name: Update Darwin system
      homebrew:
        upgrade_all: true
      become: "{{ become_for_packages }}"
      when: ansible_facts['os_family'] == 'Darwin'
    - name: Update Debian system
      apt:
        upgrade: full
      become: "{{ become_for_packages }}"
      when: ansible_facts['os_family'] == 'Debian'
    - name: Install git
      package:
        name: git
        state: present
      become: "{{ become_for_packages }}"
    - name: Clone dotfiles
      git:
        bare: true
        clone: true
        depth: 1
        dest: ~/.dotfiles
        repo: https://github.com/mtoohey31/dotfiles
        update: true
    - name: Reset dotfiles
      shell: git --git-dir=$HOME/.dotfiles --work-tree=$HOME reset --hard
    - name: Clone submodules
      shell:
        cmd: git --git-dir=$HOME/.dotfiles --work-tree=$HOME submodule update --init --recursive
        chdir: $HOME
    - name: Hide untracked files
      shell: git --git-dir=$HOME/.dotfiles --work-tree=$HOME config --local status.showUntrackedFiles no
    - name: Remove README
      file:
        state: absent
        path: ~/README.md
    - name: Ignore README changes
      shell: git --git-dir=$HOME/.dotfiles --work-tree=$HOME update-index --skip-worktree $HOME/README.md
    - name: Temporarily allow all commands without password
      blockinfile:
        path: /etc/sudoers
        block: "%wheel ALL=(ALL) NOPASSWD: ALL"
      become: true
      when: ansible_facts['os_family'] == 'Archlinux'
    - name: Install base-devel for paru
      pacman:
        name: base-devel
      become: true
      when: ansible_facts['os_family'] == 'Archlinux'
    - name: Install paru
      aur:
        name: paru
        use: makepkg
        state: present
      when: ansible_facts['os_family'] == 'Archlinux'
    - name: Disable all commands without password
      blockinfile:
        path: /etc/sudoers
        block: "%wheel ALL=(ALL) NOPASSWD: ALL"
        state: absent
      become: true
      when: ansible_facts['os_family'] == 'Archlinux'
